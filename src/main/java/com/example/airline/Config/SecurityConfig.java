package com.example.airline.Config;import com.example.airline.Service.UserDetailServiceImpl;import com.example.airline.filter.JWTFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfig {    @Autowired    private UserDetailServiceImpl userDetailService;    @Autowired    private JWTFilter jwtFilter;    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http                .csrf(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(auth -> auth                                .requestMatchers("/api/auth/signup").permitAll()                                .requestMatchers("/api/auth/login").permitAll()                                .requestMatchers("/api/public").permitAll()                                .requestMatchers(HttpMethod.GET, "/api/flights/all").permitAll()                                .requestMatchers(HttpMethod.GET, "/api/flights/search").permitAll()                                .requestMatchers(HttpMethod.GET, "/api/flights/{id}").permitAll()                                .requestMatchers(HttpMethod.GET, "/api/bookings/all").hasRole("USER")                                .requestMatchers(HttpMethod.GET, "/api/bookings/{id}").hasRole("USER")  //get booking by id                                .requestMatchers(HttpMethod.GET, "/api/bookings/user/{userId}").hasRole("USER")                                .requestMatchers(HttpMethod.POST, "/api/bookings/book").hasRole("USER")                                .requestMatchers(HttpMethod.GET, "/api/bookings/flight/{flightId}").hasRole("USER") //get flight by flight id                                .requestMatchers(HttpMethod.GET, "/api/bookings/available-seats/{flightId}").hasRole("USER") //get avail-seat by flight id                                .requestMatchers(HttpMethod.DELETE, "/api/bookings/{id}").hasRole("USER") //delete booking by id                                .requestMatchers(HttpMethod.POST, "/api/flight/add").hasRole("ADMIN")                                .requestMatchers(HttpMethod.PUT, "/api/flight/{id}").hasRole("ADMIN")                                .requestMatchers(HttpMethod.DELETE, "/api/flight/{id}").hasRole("ADMIN")//                                .requestMatchers("/api/users/**").hasRole("USER")                                .anyRequest().authenticated()                )                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .authenticationProvider(authenticationProvider())                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);//                .oauth2Login(Customizer.withDefaults());        return http.build();    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {        return config.getAuthenticationManager();    }    @Bean    public DaoAuthenticationProvider authenticationProvider() {        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();        authProvider.setUserDetailsService(userDetailService);        authProvider.setPasswordEncoder(passwordEncoder());        return authProvider;    }}