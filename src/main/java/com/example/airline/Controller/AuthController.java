package com.example.airline.Controller;import com.example.airline.Entity.User;import com.example.airline.Payload.LoginRequest;import com.example.airline.Payload.SignupRequest;import com.example.airline.Repositery.UserRepository;//import com.example.airline.Utils.JwtUtils;import com.example.airline.Utils.JWTUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import java.util.Optional;@RestController@RequestMapping("/api/users")public class AuthController {    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private UserRepository userRepository;    @PostMapping("/login")    public ResponseEntity<?> Login(@RequestBody LoginRequest request) {        Optional<User> userOpt = userRepository.findByUsername(request.getUsername());        try {             Authentication authentication = authenticationManager.authenticate(                    new UsernamePasswordAuthenticationToken(                            request.getUsername(),                            request.getPassword()                    )            );            String token = JWTUtil.generateToken(authentication.getName());            return ResponseEntity.ok()                    .header("Authorization", "Bearer " + token)  // Standard JWT header format                    .body(token);        } catch (AuthenticationException e) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");        }    }    @GetMapping("/google/auth")    public String OAuth(){        return "Authorized";    }    @PostMapping("/signup")    public ResponseEntity<?> Signup(@RequestBody SignupRequest request) {        try {            Optional<User> existingUser = userRepository.findByEmail(request.getEmail());            if (existingUser.isPresent()) {                throw new RuntimeException("Email already exists");            }            if (userRepository.findByUsername(request.getUsername()).isPresent()) {                throw new RuntimeException("Username already exists");            }            User user = new User();            user.setName(request.getName());            user.setEmail(request.getEmail());            user.setUsername(request.getUsername());            user.setPassword(passwordEncoder.encode(request.getPassword()));            if (request.getRole() == null) {                user.setRole("USER");            } else {                user.setRole(request.getRole());            }            userRepository.save(user);            return ResponseEntity.ok()                    .header("message", "Signup Successful") // Fixed typo                    .body(user);        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST)                    .body("Signup failed: " + e.getMessage()); // Added space after colon        }    }}