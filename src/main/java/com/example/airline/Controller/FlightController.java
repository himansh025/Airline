package com.example.airline.Controller;import com.example.airline.Entity.Flight;import com.example.airline.Service.FlightService;import com.example.airline.dto.FlightRequestDTO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.time.LocalDate;import java.util.List;@RestController@RequestMapping("/api/flights")@CrossOrigin(origins = "*")public class FlightController {    @Autowired    private FlightService flightService;    @PostMapping("/add")    public ResponseEntity<?> addFlight(@RequestBody FlightRequestDTO flight) {        try {            Flight savedFlight = flightService.addFlight(flight);            return ResponseEntity.ok()                    .header("message","Flight added successfully")                    .body(savedFlight);        } catch (Exception e) {            return ResponseEntity.badRequest()                    .body( "Failed to add flight: " + e.getMessage());        }    }    @GetMapping("/all")    public ResponseEntity<?> getAllFlights() {        try {            List<Flight> flights = flightService.getAllFlights();            return ResponseEntity.ok()                    .header("message","Flights retrieved successfully")                    .body(flights);        } catch (Exception e) {            return ResponseEntity.badRequest()                    .body( "Failed to retrieve flight"+e.getMessage());        }    }    @GetMapping("/{id}")    public ResponseEntity<?> getFlightById(@PathVariable Long id) {        try {            Flight flight = flightService.getFlightById(id);            return ResponseEntity.ok()                    .header("message","Flight retrieved successfully")                    .body(flight);        } catch (Exception e) {            return ResponseEntity.badRequest()                    .body("Flight not found" + e.getMessage());        }    }    @GetMapping("/search")    public ResponseEntity<?> searchFlights(            @RequestParam String source,            @RequestParam String destination,            @RequestParam String departureDate) {        try {            LocalDate date = LocalDate.parse(departureDate);            List<Flight> flights = flightService.searchFlights(source, destination, date);            return ResponseEntity.ok()                    .header("message","Search Flight successfully")                    .body(flights);        } catch (Exception e) {            return ResponseEntity.badRequest()                    .body("Search failed: " + e.getMessage());        }    }    @PutMapping("/{id}")    public ResponseEntity<?> updateFlight(@PathVariable Long id, @RequestBody Flight flight) {        try {            Flight updatedFlight = flightService.updateFlight(id, flight);            return ResponseEntity.ok()                    .header("message","Flight updated successfully")                    .body(updatedFlight);        } catch (Exception e) {return ResponseEntity.badRequest()                    .body("Update failed: " + e.getMessage());        }    }    @DeleteMapping("/{id}")    public ResponseEntity<?> deleteFlight(@PathVariable Long id) {        try {            flightService.deleteFlight(id);            return ResponseEntity.ok()                    .header("message","Flight deleted successfully")                    .body(null);        } catch (Exception e) {            return ResponseEntity.badRequest()                    .body("Delete failed: " + e.getMessage());        }    }}