package com.example.airline.Controller;import com.example.airline.Entity.User;import com.example.airline.Service.BookingService;import com.example.airline.Service.FlightService;import com.example.airline.Service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/admin")@CrossOrigin(origins = "*")public class AdminController {    @Autowired    private  UserService userService;    @Autowired    private FlightService flightService;    @Autowired    private BookingService bookingService;//    @GetMapping("/dashboard")//    public ResponseEntity<?> getDashboardData() {//        try {//            DashboardData data = new DashboardData();//            data.setTotalUsers(userService.getTotalUsers());//            data.setTotalFlights(flightService.getTotalFlights());//            data.setTotalBookings(bookingService.getTotalBookings());//            return ResponseEntity.ok(new ApiResponse("Dashboard data retrieved", data));//        } catch (Exception e) {//            return ResponseEntity.badRequest().body(new ApiResponse("Failed to retrieve dashboard data", null));//        }//    }    @GetMapping("/users/all")    public ResponseEntity<?> getAllUsersForAdmin() {        try {            List<User> users = userService.getAllUsers();            return ResponseEntity.ok()                    .header("message","All users retrieved")                    .body(users);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to retrieve users");        }    }    @DeleteMapping("/users/{id}")    public ResponseEntity<?> deleteUser(@PathVariable Long id) {        try {            userService.deleteUser(id);            return ResponseEntity.ok()                    .header("message","User deleted successfully")                    .body(null);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to delete user");        }    }    @PutMapping("/users/{id}/role")    public ResponseEntity<?> updateUserRole(@PathVariable Long id, @RequestBody User request) {        try {            User user = userService.updateUserRole(id, request.getRole());            return ResponseEntity.ok()                    .header("message","User role updated successfully")                    .body( user);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to update user role");        }    }}