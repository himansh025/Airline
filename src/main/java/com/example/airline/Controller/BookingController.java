package com.example.airline.Controller;import com.example.airline.Entity.Booking;import com.example.airline.Entity.Flight;import com.example.airline.Entity.User;import com.example.airline.Repositery.FlightRepository;import com.example.airline.Repositery.UserRepository;import com.example.airline.Service.BookingService;import com.example.airline.Service.EmailService;import com.example.airline.dto.BookingRequestDTO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/bookings")@CrossOrigin(origins = "*")public class BookingController {@Autowiredprivate UserRepository userRepository;    @Autowired    private BookingService bookingService;    @Autowired    private FlightRepository flightRepository;    @PostMapping("/book")    public ResponseEntity<?> bookFlight(@RequestBody BookingRequestDTO bookingRequest) {        try {            Booking booking = bookingService.bookFlight(                    bookingRequest.getUser(),                    bookingRequest.getFlight(),                    bookingRequest.getSeatNumber()            );            return ResponseEntity.ok()                    .header("message","Flight booked successfully")                    .body(booking);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Booking failed: " + e.getMessage());        }    }    @GetMapping("/user/{userId}")    public ResponseEntity<?> getUserBookings(@PathVariable Long userId) {        try {            List<Booking> bookings = bookingService.getUserBookings(userId);            return ResponseEntity.ok()                    .header("message","User bookings retrieved")                    .body( bookings);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to retrieve bookings");        }    }    @GetMapping("/flight/{flightId}")    public ResponseEntity<?> getFlightBookings(@PathVariable Long flightId) {        try {            List<Booking> bookings = bookingService.getFlightBookings(flightId);            return ResponseEntity.ok()                    .header( "message","Flight bookings retrieved")                    .body(bookings);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to retrieve bookings");        }    }    @GetMapping("/{id}")    public ResponseEntity<?> getBookingById(@PathVariable Long id) {        try {            Booking booking = bookingService.getBookingById(id);            return ResponseEntity.ok()                    .header("message","Booking retrieved successfully")                    .body(booking);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Booking not found");        }    }    @GetMapping("/all")    public ResponseEntity<?> getAllBookings() {        try {            List<Booking> bookings = bookingService.getAllBookings();            return ResponseEntity.ok()                    .header("message","All bookings retrieved")                    .body(bookings);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to retrieve bookings");        }    }    @DeleteMapping("/{id}")    public ResponseEntity<?> cancelBooking(@PathVariable Long id) {        try {            bookingService.cancelBooking(id);            return ResponseEntity.ok()                    .header("message","Booking cancelled successfully")                    .body(null);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Cancellation failed: " + e.getMessage());        }    }    @GetMapping("/available-seats/{flightId}")    public ResponseEntity<?> getAvailableSeats(@PathVariable Long flightId) {        try {            List<String> availableSeats = bookingService.getAvailableSeats(flightId);            return ResponseEntity.ok()                    .header("message","Available seats retrieved")                    .body(availableSeats);        } catch (Exception e) {            return ResponseEntity.badRequest().body("Failed to get available seats");        }    }}