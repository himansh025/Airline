package com.example.airline.Service;import com.example.airline.Entity.User;import com.example.airline.Repositery.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class UserService {    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder;    public User registerUser(User user) {        Optional<User> existinguser = userRepository.findByEmail(user.getEmail());        if (existinguser!=null && !existinguser.equals("")) {            throw new RuntimeException("Email already exists");        }        if (userRepository.findByUsername(user.getUsername()).isPresent()) {            throw new RuntimeException("Username already exists");        }        user.setPassword(passwordEncoder.encode(user.getPassword()));        if (user.getRole() == null) {            user.setRole("USER");        }        return userRepository.save(user);    }    public String loginUser(String email, String password) {        Optional<User> userOpt = userRepository.findByEmail(email);        if (userOpt.isPresent()) {            User user = userOpt.get();            if (passwordEncoder.matches(password, user.getPassword())) {                // Generate JWT token here                return "jwt_token_" + user.getId();            }        }        throw new RuntimeException("Invalid email or password");    }    public User getUserById(Long id) {        return userRepository.findById(id)                .orElseThrow(() -> new RuntimeException("User not found"));    }    public User updateUser(Long id, User user) {        User existingUser = getUserById(id);        existingUser.setName(user.getName());        existingUser.setEmail(user.getEmail());        return userRepository.save(existingUser);    }    public List<User> getAllUsers() {        return userRepository.findAll();    }    public void deleteUser(Long id) {        userRepository.deleteById(id);    }    public User updateUserRole(Long id, String role) {        User user = getUserById(id);        user.setRole(role);        return userRepository.save(user);    }    public long getTotalUsers() {        return userRepository.count();    }}