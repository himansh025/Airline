package com.example.airline.Service;import com.example.airline.Entity.Flight;import com.example.airline.Repositery.FlightRepository;import com.example.airline.dto.FlightRequestDTO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;@Servicepublic class FlightService {    @Autowired    private FlightRepository flightRepository;    public Flight addFlight(FlightRequestDTO flight) {        if (flight.getTotalSeats() <= 0) {            throw new RuntimeException("Total seats must be greater than 0");        }        Flight flightData= new Flight();        flightData.setAirline(flight.getAirline());        flightData.setSource(flight.getSource());        flightData.setDestination(flight.getDestination());        flightData.setDepartureDate(flight.getDepartureDate());        flightData.setDepartureTime(flight.getDepartureTime());        flightData.setTotalSeats(flight.getTotalSeats());        return flightRepository.save(flightData);    }    public List<Flight> getAllFlights() {        return flightRepository.findAll();    }    public Flight getFlightById(Long id) {        return flightRepository.findById(id)                .orElseThrow(() -> new RuntimeException("Flight not found with id: " + id));    }    public List<Flight> searchFlights(String source, String destination, LocalDate departureDate) {        return flightRepository.findBySourceAndDestinationAndDepartureDate(source, destination, departureDate);    }    public Flight updateFlight(Long id, Flight flightDetails) {        Flight existingFlight = getFlightById(id);        existingFlight.setAirline(flightDetails.getAirline());        existingFlight.setSource(flightDetails.getSource());        existingFlight.setDestination(flightDetails.getDestination());        existingFlight.setDepartureDate(flightDetails.getDepartureDate());        existingFlight.setDepartureTime(flightDetails.getDepartureTime());        existingFlight.setTotalSeats(flightDetails.getTotalSeats());        return flightRepository.save(existingFlight);    }    public void deleteFlight(Long id) {        Flight flight = getFlightById(id);        flightRepository.delete(flight);    }    public long getTotalFlights() {        return flightRepository.count();    }    public boolean isFlightAvailable(Long flightId, LocalDate date) {        Flight flight = getFlightById(flightId);        return flight.getDepartureDate().equals(date);    }}