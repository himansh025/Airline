package com.example.airline.Service;import com.example.airline.Entity.Flight;import com.example.airline.Repositery.FlightRepository;import com.example.airline.dto.FlightRequestDTO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.cache.annotation.Caching;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;@Servicepublic class FlightService {    @Autowired    private FlightRepository flightRepository;    // Cache individual flights by ID    @Caching(            put = @CachePut(value = "flights", key = "#result.id"),            evict = @CacheEvict(value = "flightCollections", allEntries = true)    )    public Flight addFlight(FlightRequestDTO flight) {        if (flight.getTotalSeats() <= 0) {            throw new RuntimeException("Total seats must be greater than 0");        }        Flight flightData = new Flight();        flightData.setAirline(flight.getAirline());        flightData.setSource(flight.getSource());        flightData.setDestination(flight.getDestination());        flightData.setDepartureDate(flight.getDepartureDate());        flightData.setDepartureTime(flight.getDepartureTime());        flightData.setTotalSeats(flight.getTotalSeats());        Flight savedFlight = flightRepository.save(flightData);        System.out.println("Flight added to database and cache: " + savedFlight.getId());        return savedFlight;    }    // Cache all flights - will cache the entire list    @Cacheable(value = "flightCollections", key = "'allFlights'", unless = "#result.isEmpty()")    public List<Flight> getAllFlights() {        System.out.println("Loading all flights from database...");        List<Flight> allFlights = flightRepository.findAll();        System.out.println("Loaded " + allFlights.size() + " flights from database");        return allFlights;    }    // Cache individual flight by ID    @Cacheable(value = "flights", key = "#id", unless = "#result == null")    public Flight getFlightById(Long id) {        System.out.println("Loading flight from database: " + id);        return flightRepository.findById(id)                .orElseThrow(() -> new RuntimeException("Flight not found with id: " + id));    }    @Cacheable(value = "flightCollections",            key = "'search:' + #source + '-' + #destination + '-' + #departureDate",            unless = "#result.isEmpty()")    public List<Flight> searchFlights(String source, String destination, LocalDate departureDate) {        System.out.println("Searching flights: " + source + " -> " + destination + " on " + departureDate);        List<Flight> flights = flightRepository.findBySourceAndDestinationAndDepartureDate(source, destination, departureDate);        System.out.println("Found " + flights.size() + " flights");        return flights;    }    @Caching(            put = @CachePut(value = "flights", key = "#id"),            evict = @CacheEvict(value = "flightCollections", allEntries = true)    )    public Flight updateFlight(Long id, Flight flightDetails) {        Flight existingFlight = getFlightById(id);        existingFlight.setAirline(flightDetails.getAirline());        existingFlight.setSource(flightDetails.getSource());        existingFlight.setDestination(flightDetails.getDestination());        existingFlight.setDepartureDate(flightDetails.getDepartureDate());        existingFlight.setDepartureTime(flightDetails.getDepartureTime());        existingFlight.setTotalSeats(flightDetails.getTotalSeats());        return flightRepository.save(existingFlight);    }    @Caching(evict = {            @CacheEvict(value = "flights", key = "#id"),            @CacheEvict(value = "flightCollections", allEntries = true)    })    public void deleteFlight(Long id) {        Flight flight = getFlightById(id);        flightRepository.delete(flight);    }    // Don't cache frequently changing data    public long getTotalFlights() {        return flightRepository.count();    }    // Cache flight availability check    @Cacheable(value = "flightAvailability",            key = "#flightId + '-' + #date",            unless = "#result == false")    public boolean isFlightAvailable(Long flightId, LocalDate date) {        System.out.println("Checking availability for flight: " + flightId + " on " + date);        Flight flight = getFlightById(flightId);        boolean available = flight.getDepartureDate().equals(date);        System.out.println("Flight " + flightId + " availability: " + available);        return available;    }}