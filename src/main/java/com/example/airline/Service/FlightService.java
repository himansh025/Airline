package com.example.airline.Service;import com.example.airline.Entity.Flight;import com.example.airline.Repositery.FlightRepository;import com.example.airline.dto.FlightRequestDTO;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.CachePut;import org.springframework.cache.annotation.Cacheable;import org.springframework.cache.annotation.Caching;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;@Servicepublic class FlightService {    @Autowired    private FlightRepository flightRepository;    @Caching(            put = @CachePut(value = "flights", key = "#result.id"),            evict = @CacheEvict(value = "flightCollections", allEntries = true)    )    public Flight addFlight(FlightRequestDTO flight) {        if (flight.getTotalSeats() <= 0) {            throw new RuntimeException("Total seats must be greater than 0");        }        Flight flightData = new Flight();        flightData.setAirline(flight.getAirline());        flightData.setSource(flight.getSource());        flightData.setDestination(flight.getDestination());        flightData.setDepartureTime(flight.getDepartureTime());        flightData.setTotalSeats(flight.getTotalSeats());        Flight savedFlight = flightRepository.save(flightData);        System.out.println("Flight added to database and cache: " + savedFlight.getId());        return savedFlight;    }    @Cacheable(value = "flightCollections", key = "'allFlights'", unless = "#result.isEmpty()")    public List<Flight> getAllFlights() {        System.out.println("Loading all flights from database...");        List<Flight> allFlights = flightRepository.findAll();        System.out.println("Loaded " + allFlights.size() + " flights from database");        return allFlights;    }    // Return Flight instead of Optional<Flight> for controller compatibility    @Cacheable(value = "flights", key = "#id")    public Flight findById(Long id) {        System.out.println("Loading flight from database: " + id);        Optional<Flight> flight = flightRepository.findById(id);        return flight.orElseThrow(() -> new RuntimeException("Flight not found with id: " + id));    }    // Keep this method for internal use when Optional is needed    public Optional<Flight> findByIdOptional(Long id) {        return flightRepository.findById(id);    }    @Cacheable(value = "flightCollections",            key = "'search:' + #source + '-' + #destination + '-' + #departureDate",            unless = "#result.isEmpty()")    public List<Flight> searchFlights(String source, String destination, LocalDate departureDate) {        System.out.println("Searching flights: " + source + " -> " + destination + " on " + departureDate);        List<Flight> flights = flightRepository.findBySourceAndDestinationAndDepartureTime(source, destination, departureDate);        System.out.println("Found " + flights.size() + " flights");        return flights;    }    @Caching(            put = @CachePut(value = "flights", key = "#id"),            evict = @CacheEvict(value = "flightCollections", allEntries = true)    )    public Flight updateFlight(Long id, Flight flightDetails) {        Optional<Flight> existingFlightOpt = flightRepository.findById(id);        if (existingFlightOpt.isEmpty()) {            throw new RuntimeException("Flight not found with id: " + id);        }        Flight existingFlight = existingFlightOpt.get();        existingFlight.setAirline(flightDetails.getAirline());        existingFlight.setSource(flightDetails.getSource());        existingFlight.setDestination(flightDetails.getDestination());        existingFlight.setDepartureTime(flightDetails.getDepartureTime());        existingFlight.setTotalSeats(flightDetails.getTotalSeats());        return flightRepository.save(existingFlight);    }    @Caching(evict = {            @CacheEvict(value = "flights", key = "#id"),            @CacheEvict(value = "flightCollections", allEntries = true)    })    public void deleteFlight(Long id) {        Optional<Flight> flightOpt = flightRepository.findById(id);        if (flightOpt.isEmpty()) {            throw new RuntimeException("Flight not found with id: " + id);        }        flightRepository.delete(flightOpt.get());    }    public long getTotalFlights() {        return flightRepository.count();    }    @Cacheable(value = "flightAvailability",            key = "#flightId + '-' + #date",            unless = "#result == false")    public boolean isFlightAvailable(Long flightId, LocalDateTime date) {        System.out.println("Checking availability for flight: " + flightId + " on " + date);        Optional<Flight> flightOpt = flightRepository.findById(flightId);        if (flightOpt.isEmpty()) {            System.out.println("Flight " + flightId + " not found");            return false;        }        Flight flight = flightOpt.get();        boolean available = flight.getDepartureTime().equals(date);        System.out.println("Flight " + flightId + " availability: " + available);        return available;    }}