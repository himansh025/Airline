package com.example.airline.filter;import com.example.airline.Service.UserDetailServiceImpl;import com.example.airline.Utils.JWTUtil;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException; @Component    public class JWTFilter extends OncePerRequestFilter {        @Autowired        private JWTUtil jwtUtil;        @Autowired        private UserDetailServiceImpl userDetailService;        @Override        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {            String authHeader = request.getHeader("Authorization");            String token = null;            String username = null;            if (authHeader != null && authHeader.startsWith("Bearer ")) {                token = authHeader.substring(7);                username = jwtUtil.extractUsername(token);            }            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {                UserDetails userDetails = userDetailService.loadUserByUsername(username);                if (jwtUtil.validateToken(username, userDetails, token)) {                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                    SecurityContextHolder.getContext().setAuthentication(authToken);                }            }            filterChain.doFilter(request,response);        }    }