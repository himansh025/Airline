package com.example.airline.Utils;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.security.Keys;import org.hibernate.boot.jaxb.mapping.JaxbEmptyType;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Component;import javax.crypto.SecretKey;import java.util.Date;@Componentpublic class JWTUtil {    private static final String SECRET = "efdcfhgefdvcbfefs@dvegvfvbfrbedv4r4v-!23@#%4323fef";    private static final SecretKey key = Keys.hmacShaKeyFor(SECRET.getBytes());    private static final long expirationTime = 1000 * 60 * 60;    public static String generateToken(String username) {        return Jwts.builder()                .setSubject(username)                .setIssuedAt(new Date())                .setExpiration(new Date(System.currentTimeMillis() + expirationTime))                .signWith(key, SignatureAlgorithm.HS256)                .compact();    }    public String extractUsername(String token) {        return extractClaims(token).getSubject();    }    private Claims extractClaims(String token) {        return Jwts.parser()                .setSigningKey(key)                .build()                .parseClaimsJws(token)                .getBody();    }    public boolean validateToken(String username, UserDetails userDetails, String token) {        return username.equals(userDetails.getUsername()) && !isTokenExpired(token);    }    private boolean isTokenExpired(String token) {        return extractClaims(token).getExpiration().before(new Date());    }}